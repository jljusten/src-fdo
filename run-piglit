#!/usr/bin/env python3
# Jordan Justen : this file is public domain

from collections import Counter
import io
import os
import re
import shutil
import subprocess
import sys
import time

def run(args, capture=True):
    cp = subprocess.run(args, capture_output=capture, text=True)
    assert(cp.returncode == 0)
    return cp

def run_func(args):
    cp = run(args)
    lines = cp.stdout.split('\n')
    if len(lines) == 2 and lines[1] == '':
        lines = lines[:1]
    assert len(lines) == 1
    return lines[0]

SCRIPT=os.path.realpath(sys.argv[0])
HERE=os.path.dirname(SCRIPT)
here_plus = lambda *args: os.path.join(HERE, *args)

fdo_dir = os.path.expanduser('~/src/fdo')
fdo_plus = lambda *args: os.path.join(fdo_dir, *args)
with_dev_mesa = fdo_plus('run-with-dev-mesa')

if len(sys.argv) < 2:
    what = None
    args = []
else:
    what = sys.argv[1]
    args = sys.argv[2:]

if what == '1k':
        test_list = [ "--test-list=" +
                      fdo_plus('test-lists/piglit-gen12-simics.txt') ]
        profile = 'all'
elif what in { 'gpu', 'sanity', 'all' }:
        test_list = []
        profile = what
elif what == 'vk-rt':
        test_list = "-t "'dEQP-VK.ray_tracing_pipeline.builtin.launchidext.*_1_1_1'
        test_list = [ "--test-list=" +
                      fdo_plus('piglit/vkcts-rt-tests.txt') ]
        profile = "deqp_vk"
else:
    what = None

if what is None:
    print(f"Usage: {sys.argv[0]} [1k | all | gpu | sanity] [piglit params...]")
    sys.exit(-1)

if os.access(here_plus('piglit/piglit'), os.X_OK):
    piglit = here_plus('piglit')
else:
    piglit = os.path.expanduser('~/src/fdo/piglit')
bin = os.path.join(piglit, 'piglit')

if not os.access(bin, os.X_OK):
    print(bin, 'is not executable')
    sys.exit(1)

os.environ['vblank_mode'] = '0'
os.environ['NIR_VALIDATE'] = '0'
os.environ.pop('DISPLAY', None)

timenow = time.strftime(r'%y%m%d-%H%M%S')

RESULTS_SUBDIR = os.environ.get('RESULTS_SUBDIR')
if not RESULTS_SUBDIR:
    RESULTS_SUBDIR = run_func([ 'hostname' ])

LOG_DIR = here_plus('results', RESULTS_SUBDIR)
os.makedirs(LOG_DIR, exist_ok=True)
LOG = os.path.join(LOG_DIR, f'{what}-{timenow}')

if 'CMD_ENV' in os.environ:
    CMD_ENV = [ os.environ['CMD_ENV'], ]
else:
    CMD_ENV = [ with_dev_mesa, ]

cmd = [ bin, 'run', profile ] + test_list + [ LOG ] + args

print(' '.join(cmd))
nice = shutil.which('nice')
cmd = [ nice ] + CMD_ENV + cmd

stdout_isatty = sys.stdout.isatty()
status_re = re.compile(r'\[\d+/\d+\] (\w+: \d+)(, (\w+: \d+))*\s*')
terse_filter_re = re.compile(r'(^\s*$)|^(Thank you|Results have)')
last_status = None
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                     encoding='utf-8', cwd=piglit)

def send_last_status():
    global last_status
    if last_status is not None:
        sys.stdout.write(last_status)
        last_status = None

for l in iter(p.stdout.readline, ''):
    mo = status_re.match(l)
    if mo is not None:
        if not stdout_isatty:
            last_status = l
        else:
            sys.stdout.write(l.replace('\n', '\r'))
    else:
        send_last_status()
        if stdout_isatty:
            sys.stdout.write(l)
        else:
            mo = terse_filter_re.match(l)
            if mo is None:
                print(l, end='', flush=True)

send_last_status()
