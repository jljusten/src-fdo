#!/usr/bin/env python3
# Jordan Justen : this file is public domain

from collections import Counter
import os
import re
import shutil
import subprocess
import sys
import time

SCRIPT=os.path.realpath(sys.argv[0])
HERE=os.path.dirname(SCRIPT)
here_plus = lambda *args: os.path.join(HERE, *args)
with_dev_mesa = here_plus('run-with-dev-mesa')

def run(args, capture=True):
    cp = subprocess.run(args, capture_output=capture, text=True)
    assert(cp.returncode == 0)
    return cp

def run_func(args):
    cp = run(args)
    lines = cp.stdout.split('\n')
    if len(lines) == 2 and lines[1] == '':
        lines = lines[:1]
    assert len(lines) == 1
    return lines[0]

if os.path.exists(here_plus('crucible/bin/crucible')):
    CRUCIBLE = here_plus('crucible')
else:
    CRUCIBLE = os.path.expanduser('~/src/fdo/crucible')

BIN = os.path.join(CRUCIBLE, 'bin/crucible')

if not os.access(BIN, os.X_OK):
    print(BIN, "is not executable")
    sys.exit(1)

START = os.environ.get('START')
END = os.environ.get('END')
if START is not None and len(START) > 0:
    regex = re.compile(r'^OpenGL (version|renderer) .*')
    START = int(START)
    if END is not None and len(END) > 0:
        END = int(END)
    else:
        END = START + 50
    RANGE = f'-{START}-{END}'
    cp = run([BIN, 'ls-tests'])
    all_tests = [ test for test in cp.stdout.split('\n')
                  if test.startswith('func.') ]
    TESTS = [ test for i, test in enumerate(all_tests)
              if i >= START and i < END ]
else:
    RANGE = ''
    TESTS = []

timenow = time.strftime(r'%y%m%d-%H%M%S')

RESULTS_SUBDIR = os.environ.get('RESULTS_SUBDIR')
if not RESULTS_SUBDIR:
    RESULTS_SUBDIR = run_func([ 'hostname' ])
    assert '\n' not in RESULTS_SUBDIR

LOG_DIR = here_plus('results', RESULTS_SUBDIR)
os.makedirs(LOG_DIR, exist_ok=True)
LOG = os.path.join(LOG_DIR, f'crucible-{timenow}{RANGE}.log')

# Required
if 'CMD_ENV' in os.environ:
    CMD_ENV = [ os.environ['CMD_ENV'], ]
else:
    CMD_ENV = [ with_dev_mesa, 'stdbuf', '-o', 'L', ]
cmd = [ BIN, 'run' ] + TESTS

print('Log file:', LOG)
log = open(LOG, 'w', encoding='utf-8')

args = sys.argv[1:]
cmd += args
nice = shutil.which('nice')
cmd = [ nice, ] + CMD_ENV + cmd
print(' '.join(cmd), file=log)

stdout_isatty = sys.stdout.isatty()

p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                     encoding='utf-8', cwd=LOG_DIR)

result_re = re.compile('crucible: (start|ran|pass|fail|skip|lost)')
summary_re = re.compile(r'crucible: info   : (ran|pass|fail|skip|lost) (\d+)')
printed_nums = False
results = Counter()
summary_nums = dict()
for l in iter(p.stdout.readline, ''):
    log.write(l)

    mo = result_re.match(l)
    if mo is not None:
        stat = mo.group(1)
        if stat == 'start':
            stat = 'ran'
        results.update((stat,))
        if stdout_isatty:
            stats = ', '.join([ f'{k}={v}' for (k,v) in results.items() ])
            if printed_nums:
                print('\r', end='')
            print(stats, end='', flush=True)
            printed_nums = True
        continue
    mo = summary_re.match(l)
    if mo is not None:
        assert mo.group(1) not in summary_nums
        summary_nums[mo.group(1)] = int(mo.group(2))
        continue

if printed_nums:
    print()
    printed_nums = False

assert all({ results[k] == summary_nums[k] for k in
             set(results.keys()) | set(summary_nums.keys()) })

priorities = { r: i for (i, r) in
               enumerate('pass fail lost'.split()) }
def result_name_key(r):
    global priorities
    n = priorities.get(r, len(priorities))
    return (n, r)

ran = results.pop('ran', 0)
skip = results.pop('skip', 0)

results = [ (r, results[r]) for r in
            sorted(results.keys(), key=result_name_key) ]
results = [ f'{r[0]}: {r[1]} ({r[1]/(ran - skip):.1%})' for r in results ]
results.insert(0, f'ran: {ran - skip}')
if skip > 0:
    results.append(f'({skip} skipped)')
results = ', '.join(results)
print(results, file=log)
print(results)

log.close()
